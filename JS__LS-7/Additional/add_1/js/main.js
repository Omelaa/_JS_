// - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів

// class Info {
//     constructor(id, name, username, email, address, phone, website, company) {
//         this.id = id;
//         this.name = name;
//         this.username = username;
//         this.email = email;
//         this.address = address;
//         this.phone = phone;
//         this.website = website;
//         this.company = company;
//
//     };
// }
// class Address {
//     constructor(street, suite, city, zipcode, geo) {
//         this.street = street;
//         this.suite = suite;
//         this.city = city;
//         this.zipcode = zipcode;
//         this.geo = geo;
//     };
// }
// class Geo {
//     constructor(lat, lng) {
//         this.lat = lat;
//         this.lng = lng;
//     };
// }
// class Company {
//     constructor(name, catchPhrase, bs) {
//         this.name = name;
//         this.catchPhrase = catchPhrase;
//         this.bs = bs;
//     };
// }
//
// let user = new Info(1, 'Ivan', 'Omela', 'Olex@glim.sab', new Address('dovga', 'suite', 'Lviv', '1337', new Geo(-2153.12, 21475,5)), '+8-800-555-3535', 'www.github.com', new Company('smetana', 'nomer', 'bs' ));
// console.log(user);

// {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//         lat: '-37.3159',
//         lng: '81.1496'
//         }
//      },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//         name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
//     }
//  };
//
//
// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//     -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
//
// }

// class TagInfo {
//     constructor(tagName, action, attr) {
//         this.tagName = tagName;
//         this.action = action;
//         this.attrs1 = attr;
//     };
// }
//
// class Attr {
//     constructor(attr) {
//         this.attr = attr;
//     };
// }
//
// class AttrInfo {
//     constructor(titleOfAttr, actionOfAttr) {
//         this.titleOfAttr = titleOfAttr;
//         this.actionOfAttr = actionOfAttr;
//     };
// }
//
// let tagInformation = [
//     new TagInfo('a', 'Тег a является одним из важных элементов HTML' +
//         ' и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег' +
//         ' a устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать' +
//         ' в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к ' +
//         'закладке внутри веб-страницы.',
//         new Attr([new AttrInfo('accesskey', 'Активация ссылки с помощью комбинации клавиш.'),
//             new AttrInfo('coords', 'Устанавливает координаты активной области.'),
//             new AttrInfo('download', 'Предлагает скачать указанный по ссылке файл.'),]),
//     ),
//     new TagInfo('div', 'Элемент div является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.' +
//         'Как и при использовании других блочных элементов, содержимое тега div всегда начинается с новой строки. После него также добавляется перенос строки.',
//         new Attr([new AttrInfo('align', 'Задает выравнивание содержимого тега div.'),
//             new AttrInfo('title', 'Добавляет всплывающую подсказку к содержимому.'),]),
//     ),
//     new TagInfo('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег h1 представляет собой наиболее важный заголовок первого уровня, а тег h6 служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги h1,...,h6 относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//         new Attr([new AttrInfo('align', 'Задает выравнивание содержимого тега div.'),]),
//     ),
//     new TagInfo('span', 'Тег span предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как table, p или div, с помощью тега span можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега p) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег span и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//         new Attr([new AttrInfo('accesskey', 'Активация ссылки с помощью комбинации клавиш.'),
//             new AttrInfo('class', 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'),]),
//     ),
//     new TagInfo('input', 'Тег input является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом input предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент input не требуется помещать внутрь контейнера form, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать form обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.',
//         new Attr([new AttrInfo('accesskey', 'Активация ссылки с помощью комбинации клавиш.'),
//             new AttrInfo('align', 'Задает выравнивание содержимого тега div.'),
//             new AttrInfo('form', 'Связывает поле с формой по её идентификатору.'),]),
//     ),
//     new TagInfo('form', 'Тег form устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.',
//         new Attr([new AttrInfo('accept-charset', 'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные.'),
//             new AttrInfo('action', 'Адрес программы или документа, который обрабатывает данные формы.'),
//             new AttrInfo('autocomplete', 'Включает автозаполнение полей формы.'),]),
//     ),
//     new TagInfo('option', 'Тег option определяет отдельные пункты списка, создаваемого с помощью контейнера select. Ширина списка определяется самым широким текстом, указанным в теге option, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент select внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//         new Attr([new AttrInfo('disabled', 'Заблокировать для доступа элемент списка.'),
//             new AttrInfo('label', 'Указание метки пункта списка.'),
//             new AttrInfo('selected', 'Заранее устанавливает определенный пункт списка выделенным.'),]),
//     ),
//     new TagInfo('select', 'Тег select позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега select, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге option, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега option, который должен быть вложен в контейнер select. Если планируется отправлять данные списка на сервер, то требуется поместить элемент select внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//         new Attr([new AttrInfo('accesskey', 'Активация ссылки с помощью комбинации клавиш.'),
//             new AttrInfo('autofocus', 'Устанавливает, что список получает фокус после загрузки страницы.'),
//             new AttrInfo('disabled', 'Блокирует доступ и изменение элемента.'),]),
//     )
// ];
// console.log(tagInformation);